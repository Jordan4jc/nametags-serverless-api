import AWS from "aws-sdk";
import fs from 'fs';
import { success, failure } from "./libs/response-lib";
import Handlebars from 'handlebars';
// import pdf from 'html-pdf';
const wkhtmltopdf = require("./libs/wkhtmltopdf");
const conversion = require("phantom-html-to-pdf")({
  phantomPath: require("phantomjs-prebuilt").path
});
AWS.config.update({ region: "us-east-1" });

// const pdfOptions = { format: 'Letter', phantomPath: './phantomjs_lambda/phantomjs_linux-x86_64' };
// const S3config = { bucketName: 'name-tag-studio-server' }; //Change to your bucket name

export function main(event, context, callback) {
  try {
    const ids = event.queryStringParameters['ids[]'];
    const S3 = new AWS.S3();
    const params = {
      Bucket: 'nametags-database', 
      Key: `list.json`
    };
    S3.getObject(params, function(error, data) {
      if (error) {
        console.log(error);
        callback(null, failure({ statusCode: 500, error }));
      } else {
        const tags = JSON.parse(data.Body).filter(t => ids.indexOf(t.id) > -1);
        let response = {
          statusCode: 200,
          headers: {
            'Content-type': 'application/pdf'
          }
        }
        fs.readFile(`views/printtags.hbs`, (err, resp)=>{
          if(err){
            callback(null, failure({ statusCode: 500, err }));
            return;
          }
          const source = resp.toString();
          const template = Handlebars.compile(source);
          const result = template({tags: tags});
          // pdf.create(result, pdfOptions).toBuffer(function(err, buffer){
          //   if (err){
          //     console.log("There was an error generating the PDF file");
          //     console.log(err);
          //     var error = new Error("There was an error generating the PDF file");
          //     callback(error);
          //   } else {
          //     var s3 = new AWS.S3();
          //     const date = new Date();
          //     var params = {
          //       Bucket : S3config.bucketName,
          //       Key : `pdfs/name-tags-${date.getDate()}-${date.getMonth()}-${date.getFullYear()}.pdf`,
          //       Body : buffer
          //     }

          //     console.log(buffer)
      
          //     s3.putObject(params, function(err, data) {
          //         if (err) {
          //             console.log("There was an error while saving the PDF to S3");
          //             console.log(err);
          //             var error = new Error("There was an error while saving the PDF to S3");
          //             callback(error);
          //         } else {
          //             console.log('Created PDF with data:');
          //             console.log(data);
      
          //             context.done(null, { result: 'Created PDF file' });
          //         }
          //     });
          //   }
          // });
          try {
            wkhtmltopdf(result).then(buffer => {
              callback(null, success({
                data: buffer.toString("base64")
              }, true));
            }).catch(err => {
              console.log('wkhtmltopdf error:', err)
              callback(null, failure({ statusCode: 500, err }));
            });
            // conversion({ html: result, paperSize: {
            //   format: 'Letter',
            //   widt: '8.5in',
            //   height: '11in',
            //   orientation: 'portrait',
            //   margin: '0in'
            // }}, function(err, pdf) {
            //   console.log('pdf');
            //   console.log(pdf);
            //   if (err) {
            //     console.log(err)
            //     callback(null, failure({ statusCode: 500, err }));
            //     return;
            //   }
            //   const chunks = [];
            //   pdf.on("data", function (chunk) {
            //     chunks.push(chunk);
            //   });
  
            //   // Send the buffer or you can put it into a var
            //   pdf.on("end", function () {
            //     response.body = Buffer.concat(chunks).toString('base64');
            //     response.isBase64Encoded = true;
            //     callback(null, success(response, true));
            //   });
            // });
          } catch(e) {
            console.log(e)
            callback(null, failure({ statusCode: 500 }));
          }
        });
      }
    });
  } catch (e) {;
    console.log(e);
    callback(null, failure({ statusCode: 500, error: e }));
  }
}